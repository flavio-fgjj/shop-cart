@page "/ProductDetail/{Id:int}"
@using System.Globalization

@if (Product is null && ErrorMessage is null)
{
    <ShowSpinner />
}
else if (ErrorMessage is not null)
{
    <ShowError ErrorMessage="@ErrorMessage"></ShowError>
}
else
{
    <h3 class="mb-5">Detalhes do Produto</h3>
    <div class="row">
        <div class="col-md-6 mb-4">
            <figure class="figure">
                <img class="figure-img img-fluid rounded" src="@Product.ImageUrl">
                <figcaption class="figure-caption">@Product.Description</figcaption>
            </figure>
        </div>
        <div class="col-md-6">
            <h3>@Product.Name</h3>
            <p class="mb-4">
                <b>
                    @Product.Price?.ToString("C", CultureInfo.GetCultureInfo("pt-BR"))&nbsp;(@Product.Total em estoque)
                </b>
            </p>
            <div>
                <button class="btn btn-success" 
                 @onclick="() => AddToCart_Click(new CartItemAddNewItemDto{
                         CartId = LoggedUser.CartId,
                         ProductId = Product.Id,
                         Total = 1
                  })">
                    Adicionar ao Carrinho <span class="oi oi-basket"></span>
                </button>
            </div>

        </div>
    </div>
}

@code {
    [Inject]
    public IProductService? ProductService { get; set; }

    [Inject]
    public ICartBuyService? CartBuyService { get; set; }

    [Inject]
    public NavigationManager? NavigationManager { get; set; }

    [Parameter]
    public int Id { get; set; }

    public ProductDto? Product { get; set; }

    public string? ErrorMessage { get; set; }

    [Inject]
    public IManagerCartItemsLocalStorageService? managerCartItemsLocalStorageService { get; set; }

    private List<CartItemDto>? CartBuyItems { get; set; }

    [Inject]
    public IManagerProductsLocalStorageService? managerProductsLocalStorageService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            //Product = await ProductService.GetItem(Id);
            CartBuyItems = await managerCartItemsLocalStorageService.GetCollection();
            Product = await GetProductById(Id);
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    protected async Task AddToCart_Click(CartItemAddNewItemDto cartItemAddNewItemDto)
    {
        try
        {
            var cartItemDto = await CartBuyService.AddItem(cartItemAddNewItemDto);

            if (cartItemDto != null)
            {
                CartBuyItems.Add(cartItemDto);
                await managerCartItemsLocalStorageService.SaveCollection(CartBuyItems);
            }

            NavigationManager?.NavigateTo("/CartBuy");
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
            throw;
        }
    }

    private async Task<ProductDto> GetProductById(int id)
    {
        var productsDto = await managerProductsLocalStorageService.GetCollection();
        return productsDto != null
            ? productsDto.SingleOrDefault(p => p.Id == id)
            : null;
    }
}
