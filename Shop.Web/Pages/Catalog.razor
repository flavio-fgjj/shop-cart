@page "/products"
@inject IProductService productService
@using Shop.Web.Pages.Components.Products

@if (Products is null && ErrorMessage is null)
{
    <ShowSpinner />
}
else if (ErrorMessage is not null)
{
    <ShowError ErrorMessage="@ErrorMessage"></ShowError>
}
else
{
	<h3 class="mb-5">Produtos</h3>
	@if (Products.Count() > 0)
	{
		var productsByCategory = from product in Products
									group product by product.CategoryId into productByCategoryGroup
									orderby productByCategoryGroup.Key
									select productByCategoryGroup;

		@foreach (var item in productsByCategory)
		{
		   <h4>@item.FirstOrDefault(pbc => pbc.CategoryId == item.Key)?.CategoryName</h4>
		   <div class="row mt-3">
				<ShowProducts Products="@item"></ShowProducts>
			</div>
			<hr class="mb-2"/>
		}
		
	}
}

@code {
	public IEnumerable<ProductDto>? Products { get; set; }


	[Inject]
	public ICartBuyService? CartBuyService { get; set; }

	[Inject]
	public IManagerCartItemsLocalStorageService? managerCartItemsLocalStorageService { get; set; }

	[Inject]
	public IManagerProductsLocalStorageService? managerProductsLocalStorageService { get; set; }

	public string? ErrorMessage { get; set; }

	protected override async Task OnInitializedAsync()
	{

		try
		{
			await ClearLocalStorage();

			Products = await productService.GetItems();

			// send notifications for all subscribers from CartBuyChanged event
			//var cartBuyItems = await CartBuyService.GetItems(LoggedUser.UserId);
			var cartBuyItems = await managerCartItemsLocalStorageService.GetCollection();

			CartBuyService.RaiseEventOnCartBuyChanged(cartBuyItems.Sum(x => x.Total));
		}
		catch (Exception ex)
		{
			// Don't show sensive information when you are out of develop env
			ErrorMessage = ex.Message;
		}

		
	}

	private async Task ClearLocalStorage()
	{
		await managerCartItemsLocalStorageService.RemoveCollection();
		await managerProductsLocalStorageService.RemoveCollection();
	}
}
